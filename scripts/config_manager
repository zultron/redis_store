#!/usr/bin/env python
import sys

import roslib

import rospy
import os
import collections
import json

from redis_store_msgs.msg import ParamUpdate
from redis_store_msgs.srv import (
    GetParam,
    SetParam,
    SaveDeleteParam,
    ImportExportParam,
    ResetParams,
    GetParamResponse,
    SetParamResponse,
    SaveDeleteParamResponse,
    ImportExportParamResponse,
    ResetParamsResponse,
)
from std_msgs.msg import Bool

from redis_store import RedisDict, RedisDictConnectionError
from redis_store.config import ConfigBase
import rosparam


class ConfigManager(ConfigBase):
    def __init__(self):
        rospy.init_node("config_manager")
        rospy.loginfo("Started config_manager node")

        redis_node_name = rospy.get_param('~redis_node_name', 'redis_server')
        wait_timeout_s = rospy.get_param('~redis_node_wait_timeout_s', 10.0)
        self._wait_for_redis_node_ready(redis_node_name, wait_timeout_s)
        self._create_dbs()
        self._load_defaults(rospy.get_param("~defaults_path"))
        self._check_and_correct_db_errors()
        self._load_settings_into_rosparam()
        self._advertise_service()

        # Start the main loop
        rospy.spin()

    def _check_and_correct_db_errors(self):
        for name in list(self._local.keys()):
            normalized_name = self._normalize_key(name)
            if normalized_name == name:
                continue
            val = self._local[name]
            old_name = name
            name = normalized_name
            rospy.logwarn(f"Renaming legacy param {old_name} to {name}")
            self._local[name] = val
            del self._local[old_name]

        warned = set()
        for key in list(self._local.keys()):
            subkeys = key.split('/')
            for i in range(1, len(subkeys)):
                subkey = '/'.join(subkeys[:i])
                if subkey not in self._local or subkey in warned:
                    continue
                rospy.logerr(
                    f"Partial key {subkey} of {key} in db. Please investigate."
                )
                warned.add(subkey)

    def _load_settings_into_rosparam(self):
        for name in self._defaults.keys():
            val = self._defaults[name]
            if name not in self._local:
                rospy.logdebug(f"Setting param {name} from defaults.")
                rospy.set_param(name, val)
        for name in list(self._local.keys()):
            rospy.logdebug(f"Setting param {name} from local db.")
            val = self._local[name]
            rospy.set_param(name, val)

    def _advertise_service(self):
        self._getparam_srv = rospy.Service(
            self._GET_PARAM_SRV_NAME, GetParam, self._getparam_srv_cb
        )
        self._setparam_srv = rospy.Service(
            self._SET_PARAM_SRV_NAME, SetParam, self._setparam_srv_cb
        )
        self._saveparam_srv = rospy.Service(
            self._SAVE_PARAM_SRV_NAME, SaveDeleteParam, self._saveparam_srv_cb
        )
        self._deleteparam_srv = rospy.Service(
            self._DELETE_PARAM_SRV_NAME,
            SaveDeleteParam,
            self._deleteparam_srv_cb,
        )
        self._importparam_srv = rospy.Service(
            self._IMPORT_PARAM_SRV_NAME,
            ImportExportParam,
            self._importparam_srv_cb,
        )
        self._exportparam_srv = rospy.Service(
            self._EXPORT_PARAM_SRV_NAME,
            ImportExportParam,
            self._exportparam_srv_cb,
        )
        self._resetparams_srv = rospy.Service(
            self._RESET_PARAMS_SRV_NAME, ResetParams, self._resetparams_srv_cb
        )
        self._update_pub = rospy.Publisher(
            self._UPDATE_TOPIC_NAME, ParamUpdate, queue_size=10
        )

    def _create_dbs(self):
        redis_namespace = rospy.get_param('redis_namespace', 'ros')
        redis_host = rospy.get_param('redis_host', 'localhost')
        redis_port = rospy.get_param('redis_port', 6379)
        redis_db = rospy.get_param('redis_db', 0)

        self._defaults = {}
        self._defaults_source = {}
        self._local = RedisDict(
            namespace=redis_namespace,
            host=redis_host,
            port=redis_port,
            db=redis_db,
        )

        try:
            self._local.ping()
        except RedisDictConnectionError as e:
            rospy.logerr(str(e))
            sys.exit(1)

    def _load_defaults(self, path):
        try:
            if len(path) == 0:
                raise KeyError()
        except KeyError:
            rospy.loginfo(
                "Default parameters path not supplied, assuming none."
            )
            return

        if path.startswith("pkg://"):
            parts = path.split("//")
            parts = parts[1].split("/", 1)
            pkg = parts[0]
            pkg_dir = parts[1]
            try:
                path = os.path.join(roslib.packages.get_pkg_dir(pkg), pkg_dir)
            except roslib.packages.InvalidROSPkgException:
                rospy.logerr(
                    f"Supplied defaults path '{path}' cannot be found. \n"
                    f"The ROS package '{pkg}' could not be located."
                )
                sys.exit(1)
        if not os.path.isdir(path):
            rospy.logwarn(f"Defaults path '{path}' does not exist.")
            sys.exit(1)
        try:
            files = os.listdir(path)
        except OSError:
            rospy.logerr(
                f"Can't list defaults directory {path}. Check permissions."
            )
            sys.exit(1)
        defaults = []  # a list of 3-tuples, (param, val, originating_filename)

        def flatten(d, c="", f_name=""):
            lst = []
            for k, v in d.items():
                if isinstance(v, collections.abc.Mapping):
                    lst.extend(flatten(v, c + "/" + k, f_name))
                else:
                    lst.append((c + "/" + k, v, f_name))
            return lst

        for f in files:
            if not f.endswith(".yaml"):
                continue
            params = rosparam.load_file(os.path.join(path, f))
            rospy.loginfo(f"Found default parameter file {f}")
            for p, n in params:
                defaults.extend(flatten(p, c="", f_name=f))

        # Copy the defaults into the DB if not there already
        for param, val, filename in defaults:
            param = self._normalize_key(param)
            existing = self._defaults.get(param, None)
            existing_source = self._defaults_source.get(param, None)
            if (existing is None) or (existing_source is None):
                rospy.loginfo(f"New default parameter for {param}")
                self._defaults[param] = val
                self._defaults_source[param] = filename
            elif existing_source != filename:
                rospy.logerr(
                    f"Two defaults parameter files have the same key:\n{existing_source} and {filename}, key {param}"
                )
                # Delete the entry so that it can be fixed...
                if param in self._defaults:
                    del self._defaults[param]
                if param in self._defaults_source:
                    del self._defaults_source[param]
                rospy.signal_shutdown("Default parameter set error")
            else:
                rospy.loginfo(f"Updating stored default for {param}")
                self._defaults[param] = val

    def _list_params(self):
        """
        debug function, prints out all parameters known
        """
        rospy.loginfo("Defaults:")
        for name in self._defaults.keys():
            val = self._defaults[name]
            filename = self._defaults_source[name]
            rospy.loginfo(f"name: {name}, value: {val}, filename: {filename}")

    @staticmethod
    def _normalize_key(key):
        if key.endswith('/'):
            key = key[:-1]
        if key.startswith('/'):
            return key[1:]
        else:
            return key

    @staticmethod
    def _split_data(key, data):
        def recurse_dict(key_, data_, values_):
            for k, d in data_.items():
                new_key = key_ + '/' + k
                if isinstance(d, dict):
                    recurse_dict(new_key, d, values_)
                else:
                    values_.append((new_key, d))

        if isinstance(data, dict):
            values = []
            recurse_dict(key, data, values)
            return values
        else:
            return [(key, data)]

    def _get_param(self, name):
        value = rospy.get_param(name, None)
        if value is None:
            value = self._local.get(name)
        if value is None:
            value = self._defaults.get(name)
        return value

    def _set_local_param(self, param_name, data):
        # split up keys
        values = self._split_data(param_name, data)
        # delete any local sub keys
        for key in list(self._local.keys()):
            if key.startswith(param_name):
                del self._local[key]
        # update with new values
        for key, value in values:
            self._local[key] = value

    def _getparam_srv_cb(self, req):
        """
        Could just use the ros parameter server to get the params
        but one day might not back onto the parameter server...
        """
        response = GetParamResponse()
        param_name = self._normalize_key(req.param_name)
        value = self._get_param(param_name)
        if value is None:
            rospy.logdebug(f"Could not find param {param_name}")
            response.success = False
            return response
        response.success = True
        response.param_value = json.dumps(value)
        rospy.logdebug(
            f"Get param {param_name} with value {response.param_value}"
        )
        return response

    def _setparam_srv_cb(self, req):
        """
        Set the local site-specific parameter.
        """
        try:
            data = json.loads(req.param_value)
        except ValueError:
            rospy.logerr('New parameter value must be JSON encoded')
            return SetParamResponse(False)

        param_name = self._normalize_key(req.param_name)
        rospy.logdebug(f"Set param {param_name} to {data}.")
        self._set_local_param(param_name, data)
        rospy.set_param(param_name, data)
        self._update_pub.publish(ParamUpdate(param_name, req.param_value))
        return SetParamResponse(True)

    def _saveparam_srv_cb(self, req):
        """
        This will take the current value from the rosparam server and save it into the DB
        """
        if not rospy.has_param(req.param_name):
            rospy.logerr(
                "Trying to set a parameter from ros parameter server, but it is not on server."
            )
            return SaveDeleteParamResponse(False)

        param_name = self._normalize_key(req.param_name)
        data = rospy.get_param(param_name)
        rospy.logdebug(f"Saving param {param_name} with value {data} to db.")
        self._set_local_param(param_name, data)
        return SaveDeleteParamResponse(True)

    def _deleteparam_srv_cb(self, req):
        """
        This will remove the current value from rosparam and the local value store.
        """
        param_name = self._normalize_key(req.param_name)
        deleted = False
        if rospy.has_param(param_name):
            rospy.logdebug(f"Deleting param {param_name} from param server.")
            rospy.delete_param(param_name)
            deleted = True

        for key in list(self._local.keys()):
            if key.startswith(param_name):
                if not deleted:
                    rospy.logdebug(
                        f"Deleting param {param_name} from local db."
                    )
                    deleted = True
                del self._local[key]

        if deleted:
            self._update_pub.publish(ParamUpdate(param_name, ""))

        return SaveDeleteParamResponse(deleted)

    def _importparam_srv_cb(self, req):
        """
        Imports the value from data stored in a JSON file to the rosparam and the local value store.
        """
        try:
            with open(req.file_path) as f:
                data = json.load(f)
        except ValueError:
            rospy.logerr("New parameter value must be JSON encoded")
            return ImportExportParamResponse(False)
        except OSError as e:
            rospy.logerr(f"Error reading file {req.file_path}: {e}")
            return ImportExportParamResponse(False)
        param_name = self._normalize_key(req.param_name)
        rospy.logdebug(f"Import and set param {param_name} to {data}.")
        self._set_local_param(param_name, data)
        rospy.set_param(param_name, data)
        param_value = json.dumps(data)
        self._update_pub.publish(ParamUpdate(param_name, param_value))
        return ImportExportParamResponse(True)

    def _exportparam_srv_cb(self, req):
        """
        Exports the value to a JSON file.
        """
        param_name = self._normalize_key(req.param_name)
        value = self._get_param(param_name)
        if value is None:
            rospy.logdebug(f"Could not find param {param_name}")
            return ImportExportParamResponse(False)
        rospy.logdebug(f"Export param {param_name} with value {value}.")
        try:
            with open(req.file_path, 'wt') as f:
                json.dump(value, f)
        except OSError as e:
            rospy.logerr(f"Error writing file {req.file_path}: {e}")
            return ImportExportParamResponse(False)
        return ImportExportParamResponse(True)

    def _resetparams_srv_cb(self, _req):
        """
        This will reset the params to the default value and clear out any additional local settings.
        """
        rospy.logdebug("Resetting params.")
        local_names = self._local.keys()[:]
        for name in local_names:
            rospy.logdebug(f"Removing param {name} from db.")
            rospy.delete_param(name)
        self._local.clear()
        self._load_settings_into_rosparam()

        for name in set(list(self._defaults.keys()) + local_names):
            value = self._get_param(name)
            self._update_pub.publish(ParamUpdate(name, json.dumps(value)))

        return ResetParamsResponse(True)

    @staticmethod
    def _wait_for_redis_node_ready(redis_node_name, timeout):
        rospy.wait_for_message(
            f'{redis_node_name}/ready',
            Bool,
            timeout=timeout,
        )


if __name__ == '__main__':
    server = ConfigManager()
